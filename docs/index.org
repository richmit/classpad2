# -*- Mode:Org; Coding:utf-8; fill-column:158 -*-
# ######################################################################################################################################################.H.S.##
# FILE:        readme.org
#+TITLE:       Classpad II Stuff
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DATE:        2024-02-03
#+DESCRIPTION: Some Random Stuff For Classpad II
#+KEYWORDS:    Casio
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil 
#+SEQ_TODO:    TODO:NEW(t)                         TODO:WORK(w)    TODO:HOLD(h)    | TODO:FUTURE(f)   TODO:DONE(d)    TODO:CANCELED(c)
#+PROPERTY: header-args :eval never-export
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
#+HTML_HEAD: <style>body { min-width: 500px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>.subtitle { font-size: 0.6em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_HEAD: <style>blockquote { margin-bottom: 0.5em; padding: 0.5em; background-color: #FFF8DC; border-left: 2px solid #A5573E; border-left-color: rgb(255, 228, 102); display: block; margin-block-start: 1em; margin-block-end: 1em; margin-inline-start: 5em; margin-inline-end: 5em; } </style>
#+HTML_LINK_HOME: https://www.mitchr.me/
#+HTML_LINK_UP: https://github.com/richmit/classpad2
# ######################################################################################################################################################.H.E.##

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
|          <r> | <l>                                          |
|    *Author:* | /{{{author}}}/                               |
|   *Updated:* | /{{{modification-time(%Y-%m-%d %H:%M:%S)}}}/ |
| *Generated:* | /{{{time(%Y-%m-%d %H:%M:%S)}}}/              |
#+ATTR_HTML: :align center
Copyright \copy {{{time(%Y)}}} Mitch Richling. All rights reserved.

#+TOC: headlines 5

#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #
#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #
#   010  #    020  #    030  #    040  #    050  #    060  #    070  #    080  #    090  #    100  #    110  #    120  #    130  #    140  #    150  #    160  #    170  #    180  #    190  #    200  #    210  #    220  #    230  #    240  #    250  #    260  #    270  #    280  #    290  #
# 345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #       | #         #         #         #         #         #         #         #         #         #         #         #         #         #
#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #       | #         #         #         #         #         #         #         #         #         #         #         #         #         #

* Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:

Just some stuff I've written for the Casio Classpad II calculator.

All of the programs mentioned here may be found on github: https://github.com/richmit/classpad2

#+BEGIN_QUOTE
*WARNING:* Many of these items depend upon each other.  For example the programs =gradient= & =hessian= both call the =jacobian= program and the =jacobian=
program calls the =toColVec= program. As another example, the eActivity =FunCrt2D= makes use of the programs =gradient=, =hessian=, and =subsList=.  If you
run into unresolved names, then double check that the programs are in the "library" folder, and the functions in the eActivities have been evaluated.
#+END_QUOTE

* Library Functions

Functions intended to be placed in the =Library= folder.  The functions are contained inside eActivities so that one may pick and choose which functions they
wish to have defined -- simply open the function strip, and evaluate the lines with the functions desired.

** CAS Stuff (=mjrLib/mjrCAS=)
:PROPERTIES:
:CUSTOM_ID: mjrCAS
:END:

Just a couple simple algebraic manipulation short cuts.  

 - *=tbmxs(expression)=*: Multiply top & bottom of a fraction by a factor.  The top & bottom are then separately expanded and simplified twice.
 - *=xxs(expression)=*: Expand, Expand, Simplify

** Physical Constants (=mjrLib/mjrConstants=)
:PROPERTIES:
:CUSTOM_ID: mjrConstants
:END:

All physical constants functions take the number of significant digits requested. A $0$ means to return all available digits.  All of these are from the 2018
NIST standard values.  Note many constants are defined in Casio's =Physium= application -- I just like to have these available in the keyboard function
catalog because I use them quite frequently.

Note: These all start with =c_= so they show up clumped together in the keyboard function catalog.

 - *=c_c0(d)=*: Speed of light (299792458)
 - *=c_g(d)=*: Standard acceleration of gravity (9.80665)
 - *=c_G(d)=*: Newtonian constant of gravitation (6.67430e-11)
 - *=c_atm(d)=*: Standard atmospheric pressure (101325)
 - *=c_avogadro(d)=*: Avogadro constant (6.02214076e23)

** Integer Stuff (=mjrLib/mjrIntegers=)
:PROPERTIES:
:CUSTOM_ID: mjrIntegers
:END:

Most of these functions accept & return non-negative integers.  The idea is to be able to perform bit manipulation operations on regular integers.  We can
provide binary-like input and output from these functions with the =bitI= and =bitO= functions.  It's no HP-16C, but it will work in a pinch.

 - General Integer Stuff
   - *=oddp(a)=*: 1 if odd, 0 if even
   - *=evenp(a)=*: 1 if even, 0 if odd
 - Interpreting decimal integers as binary and vice versa
   - *=bitI(a)=*: dec interpreted as bin
   - *=bitO(a)=*: bin interpreted as dec
 - Bit Shifting
   - *=bitSR(a)=*: Shift right 1 bit
   - *=bitSRn(a,n)=*: Shift right n bits
   - *=bitSL(a)=*: Shift left 1 bit
   - *=bitSLn(a,n)=*: Shift left n bits
 - Bit Counting
   - *=intLog2(a)=*: Int of base 2 log
   - *=bitSIZE(a)=*: Bits required
   - *=bitCNT(a)=*: Number of set bits
   - *=bitCLZ(a)=*: Number of left zeros
 - Binary Bitwise logical operations on fixed sized integers
   - *=bitANDn(a,b,n)=*: N bit, bitwise and
   - *=bitXORn(a,b,n)=*: N bit, bitwise xor
   - *=bitORn(a,b,n)=*: N bit, bitwise or
   - *=bitNOTn(a,b,n)=*: N bit, bitwise not
 - Binary Bitwise logical operations
   - *=bitAND(a,b)=*: Bitwise and
   - *=bitXOR(a,b)=*: Bitwise xor
   - *=bitOR(a,b)=*: Bitwise or
 - Lists of Bits (utility functions used behind the scenes)
   - *=bitLIST(a)=*: Reverse list of bits
   - *=bitLISTn(a,n)=*: Reverse list N bits
   - *=bitULIST(a)=*: Bit list to number

** Linear Algebra (=mjrLib/mjrLinearAlg=)
:PROPERTIES:
:CUSTOM_ID: mjrLinearAlg
:END:

 - *=diagR(M)=*: Diagonal for matrix (Matrix need not be square)
 - *=dprod(M)=*: Product of diagonal (Matrix need not be square)
 - *=dsum(M)=*: Diagonal Sum or trace  (Matrix need not be square)
 - *=slvLin(M,B)=*: Solve matrix equation
 - *=slvLinOE(M,B)=*: Find the least squares solution for an over-determined matrix equation
 - *=augRREF(M,B)=*: Augment two matrices together and RREF
 - *=invLeft(M)=*: Left inverse
 - *=invRight(M)=*: Right inverse
 - *=LU2P(M,L,U)=*: Return the value of $P$ for $LU$ decomposition.
 - *=cPolyS(M)=*: Characteristic polynomial via symbolic computation
 - *=cPolyN(M)=*: Characteristic polynomial via numeric interpolation
 - *=matPosP(M)=*: Matrix predicate returning TRUE if M is positive definite
 - *=matInvP(M)=*: Matrix predicate returning TRUE if M is inevitable

** Misc Math (=mjrLib/mjrMiscMath=)
:PROPERTIES:
:CUSTOM_ID: mjrMiscMath
:END:

 - *=pt2ln(p1_row_vector,p2_row_vector)=*: Equation for line given 2 points
 - *=pt2ray(start_point_row_vector,end_point_row_vector)=*: Equation for ray given 2 points

** Polynomial Stuff (=mjrLib/mjrPolynomial=)
:PROPERTIES:
:CUSTOM_ID: mjrPolynomial
:END:

 - *=rt2ply(root_list)=*: Polynomial with given roots
 - *=rt2plym(root_list)=*: Like *=rt2plym=* but the returned polynomial is monic
 - *=slvPly(polynomial_coefficients_list)=*: Solve polynomial numerically
 - *=compMtrx(polynomial_coefficients_list)=*: Companion matrix

** Repeated Measurement (=mjrLib/mjrRepMeas=)
:PROPERTIES:
:CUSTOM_ID: mjrRepMeas
:END:

I have a much more sophsticated solution for the HP-42S calculator: https://richmit.github.io/hp42/meas.html

 - Mean & Standard Deviation
   - *=repMesNS(list_of_measurements)=*: Meas Stats (μ & σ)
   - *=repMesNI(list_of_measurements)=*: Meas Interval (μ±σ)
 - Median & Interquartile Range
   - *=repMesMS(list_of_measurements)=*: Meas Stats 
   - *=repMesMI(list_of_measurements)=*: Meas Interval 

** Trig Functions (=mjrLib/mjrTrig=)
:PROPERTIES:
:CUSTOM_ID: mjrTrig
:END:

 - *=csc(angle)=*: cosecant
 - *=sec(angle)=*: secant
 - *=cot(angle)=*: cotangent
 - *=havers(angle)=*:  haversine: $\frac{1-\cos(x)}{2}$
 - *=cis(angle)=*: Cosine-I-Sine: $\cos(x)+i\cdot\sin(x)$

** Units Functions (=mjrLib/mjrUnits=)
:PROPERTIES:
:CUSTOM_ID: mjrUnits
:END:

Note: These all start with =u_= so they show up clumped together in
the keyboard function catalog.

 - Units (volume)
   - *=u_gal_L(v)=*: US Gallons to liters (A US gallon is about 0.83267 Imperial gallon)
   - *=u_L_gal(v)=*: liters to US Gallons
 - Units (force)
   - *=u_lb_kgf(v)=*: US Pounds to kg force
   - *=u_kgf_lb(v)=*: kg force to US pounds
   - *=u_N_lb(v)=*: Newtons to US pounds
   - *=u_lb_N(v)=*: US Pounds to newtons
 - Units (temp)
   - *=u_F_C(v)=*: Degrees Fahrenheit to Celsius
   - *=u_C_F(v)=*: Degrees Celsius to Fahrenheit
   - *=u_K_C(v)=*: Degrees Kelvin to Celsius
   - *=u_C_K(v)=*: Degrees Celsius to Kelvin
 - Units (length)
   - *=u_in_cm(v)=*: International inches to centimeters (2.54 inches to the centimeter)
   - *=u_cm_in(v)=*: Centimeters to international inches
   - *=u_mi_km(v)=*: International miles to kilometers
   - *=u_km_mi(v)=*: kilometers to international miles

* Programs (=mjrProg/=)
:PROPERTIES:
:CUSTOM_ID: mjrProg
:END:

One of the best ways to understand how to use these programs is to look at the "Unit Tests" in the (=mjrProgUnitTests/=) directory.  These are just
eActivities that put each program through a few tests.  The images below each program are taken from these eActivities.

** Interactive
:PROPERTIES:
:CUSTOM_ID: mjrProgInt
:END:

 - *=jacobian(expression_in_x_y_and_z)=*: Compute the Jacobin matrix of an expression \\
   This program takes an expression in up to three variables.  The second argument is the number of variables in the expression.  The expression is
   interpreted as a function with values in \( \mathbb{R}^n \).  When \(n=1\) the expression in normally a simple algebraic expression, but it may also be a
   one element list or vector.  When \(n>1\) the expression must be a list of expressions or a vector (row or column) of expressions. No matter the form of
   the input, the result will be in the standard matrix form.  For example a function \( \mathbb{R}^n\rightarrow\mathbb{R} \) will have a column vector
   jacobin and a row vector gradient. \\
   #+BEGIN_CENTER
   file:pics/jacobian-ut-01.png \\
   file:pics/jacobian-ut-02.png \\
   file:pics/jacobian-ut-03.png
   #+END_CENTER
 - *=gradient(expression_in_x_y_and_z)=*: Compute the gradient vector of an expression (always a row vector).  This is much like =jacobian=; however, the
   functions are always scalar valued -- i.e. the \(n\) in the =jacobian= documentation is equal to one.
   #+BEGIN_CENTER
   file:pics/gradient-ut-01.png
   #+END_CENTER
 - *=hessian(expression_in_x_y_and_z)=*: Compute the Hessian matrix of a scalar valued, bivariate/trivariate expression.
   #+BEGIN_CENTER
   file:pics/hessian-ut-01.png \\
   file:pics/hessian-ut-02.png
   #+END_CENTER
 - *=mkDmat(diag_as_list_matrix_or_vector)=*: Make a diagonal matrix
   #+BEGIN_CENTER
   file:pics/mkDmat-ut-01.png \\
   file:pics/mkDmat-ut-02.png 
   #+END_CENTER
 - *=mkMat(expression_in_i_and_j, number_of_rows, number_of_columns)=*: Make a matrix from an index expression
   #+BEGIN_CENTER
   file:pics/mkMat-ut-01.png \\
   file:pics/mkMat-ut-02.png 
   #+END_CENTER
 - *=newtonC1(expression_in_x, initial_guess, epsilon)=*: Search for a root of a univariate expression using Newton's method with complex arithmetic.    
   Every 10 iterations the program will ask the user if they wish to continue the search.
   #+BEGIN_CENTER
   file:pics/newtonC1-ut-01.png \\
   file:pics/newtonC1-ut-02.png
   #+END_CENTER
 - *=newtonRn(expression_in_x_y_z, initial_guess, epsilon)=*: Search for a root system of 1-3 real valued expressions using Newton's method.  This program
   accepts an expression with 1 to 3 components as it's first argument (just like the =jacobian= program), and a point with the same number of components as
   it's second argument.  Each argument may be provided as a list, row vector, or column vector.  No mater the input form, the result will always be a column
   vector.  Every 10 iterations the program will ask the user if they wish to continue the search.
   #+BEGIN_CENTER
   file:pics/newtonRn-ut-01.png \\
   file:pics/newtonRn-ut-02.png
   #+END_CENTER
 - *=subsList(expression, substitution_expression_or_list)=*: Form a list by substituting each substitution into expression.  This is a very handy way to
   substitute all the solutions from =solve= into an equation.
   #+BEGIN_CENTER
   file:pics/subsList-ut-01.png \\
   file:pics/subsList-ut-02.png 
   #+END_CENTER

** Utilities
:PROPERTIES:
:CUSTOM_ID: mjrProgUtil
:END:

These programs are designed to be used by other programs, and are far from user friendly.  Still, they can be used interactively so long as one is willing
to deal with the grumpy user interface. =:)=

 - *=toColVec(expression_list_or_vector)=*: Convert object to a column vector.  This is used by numerous programs to transform arguments into a canonical form.
 - *=subsCVec(expression, column_vector)=*: Use the components of a tuple (provided as column vector) to substitute into variables x, y, & z.  

* Computational eActivities (=mjrComp/=)
:PROPERTIES:
:CUSTOM_ID: mjrComp
:END:

These are eActivities I saved off because they contain a general computational pattern I can reuse.

 - *=FunCrt1D=*: Find the critical points of an expression in 1 variable
 - *=FunCrt2D=*: Find the critical points of an expression in 2 variables
 - *=CubicInterp=*: Cubic Interpolation between two points
 - *=LinearInterp=*: Linear Interpolation between two points
 - *=SolveTri=*: Solve triangles. I add cases as I encounter them, and so far I have ASA, SSS, SAS, & AAS.
 - *=SolveTriGeom=*: Just a couple geometry applications with triangles.
 - *=DiodeModel=*: Compute SPICE model parameters from bench measurements

* Formulas & Equations eActivities (=mjrEqn/=)
:PROPERTIES:
:CUSTOM_ID: mjrEqn
:END:

These eActivities provide a reference & computational environments for various formulas & equations.

 - *=Diode=*: Shockley Diode equation
 - *=CurrentDiv=*: Current Divider
 - *=VoltageDiv=*: Voltage Divider
 - *=HarmonicMotion=*: Harmonic Motion
 - *=OhmsLaw=*: Ohm's Law

* Shift Key Assignments

#+MACRO: HLTBC    @@html:<hr />@@
#+MACRO: NBSP    @@html:&nbsp;@@
#+MACRO: MNBSP    @@html:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@@
#+MACRO: MNBSP2    @@html:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@@

#+ATTR_HTML: :frame box :rules all :align center :width 75%
|                <c>                 |                <c>                |                 <c>                 |                <c>                 |                    <c>                     |                           <c>                            |
| =approx= {{{HLTBC}}} = {{{MNBSP}}} | =cut= {{{HLTBC}}} $x$ {{{MNBSP}}} | =paste= {{{HLTBC}}} $y$ {{{MNBSP}}} | =undo= {{{HLTBC}}} $z$ {{{MNBSP}}} | $\sqrt{\square}$ {{{HLTBC}}} ^ {{{MNBSP}}} | $\frac{\square}{\square}$ {{{HLTBC}}} $\div$ {{{MNBSP}}} |
#+ATTR_HTML: :frame box :rules all :align center :width 75%
|                    <c>                     |                   <c>                    |                   <c>                   |                         <c>                          |                     <c>                      |
|       [] {{{HLTBC}}} ( {{{MNBSP2}}}        | {{{NBSP}}} {{{HLTBC}}} $7$ {{{MNBSP2}}}  | {{{NBSP}}} {{{HLTBC}}} $8$ {{{MNBSP2}}} |       {{{NBSP}}} {{{HLTBC}}} $9$ {{{MNBSP2}}}        | {{{NBSP}}} {{{HLTBC}}} $\times$ {{{MNBSP2}}} |
|       {} {{{HLTBC}}} ) {{{MNBSP2}}}        | $e^\square$ {{{HLTBC}}} $4$ {{{MNBSP2}}} |   $\ln$ {{{HLTBC}}} $5$ {{{MNBSP2}}}    | $\log_\square(\square)$ {{{HLTBC}}} $6$ {{{MNBSP2}}} |   {{{NBSP}}}  {{{HLTBC}}} $-$ {{{MNBSP2}}}   |
|     $\vert$ {{{HLTBC}}} , {{{MNBSP2}}}     |   $\sin$ {{{HLTBC}}} $1$ {{{MNBSP2}}}    |   $\cos$ {{{HLTBC}}} $2$ {{{MNBSP2}}}   |         $\tan$ {{{HLTBC}}} $3$ {{{MNBSP2}}}          |     $\circ$ {{{HLTBC}}} $+$ {{{MNBSP2}}}     |
| $\Rightarrow$ {{{HLTBC}}} (-) {{{MNBSP2}}} |    $\pi$ {{{HLTBC}}} $0$ {{{MNBSP2}}}    |     $i$ {{{HLTBC}}} . {{{MNBSP2}}}      |       $\angle($ {{{HLTBC}}} =EXP= {{{MNBSP2}}}       |     =ans= {{{HLTBC}}} =EXE= {{{MNBSP2}}}     |

* Image Processing :noexport:

magick jacobian-gradient.bmp  -resize 50% jacobian-gradient.bmp

#+begin_src bash  :results output verbatum :exports both
magick pics/jacobian-ut-01.bmp    -gravity South -chop 0x125 -gravity North -chop 0x70  -gravity East -chop 28x0 pics/jacobian-ut-01.png
magick pics/jacobian-ut-02.bmp    -gravity South -chop 0x50  -gravity North -chop 0x90  -gravity East -chop 28x0 pics/jacobian-ut-02.png
magick pics/jacobian-ut-03.bmp    -gravity South -chop 0x55  -gravity North -chop 0x260 -gravity East -chop 28x0 pics/jacobian-ut-03.png

magick pics/gradient-ut-01.bmp    -gravity South -chop 0x55  -gravity North -chop 0x70 -gravity East -chop 28x0 pics/gradient-ut-01.png

magick pics/hessian-ut-01.bmp     -gravity South -chop 0x140 -gravity North -chop 0x70 -gravity East -chop 28x0 pics/hessian-ut-01.png
magick pics/hessian-ut-02.bmp     -gravity South -chop 0x55  -gravity North -chop 0x300 -gravity East -chop 28x0 pics/hessian-ut-02.png

magick pics/mkDmat-ut-01.bmp      -gravity South -chop 0x155 -gravity North -chop 0x70 -gravity East -chop 28x0 pics/mkDmat-ut-01.png  
magick pics/mkDmat-ut-02.bmp      -gravity South -chop 0x55  -gravity North -chop 0x305 -gravity East -chop 28x0 pics/mkDmat-ut-02.png  

magick pics/mkMat-ut-01.bmp       -gravity South -chop 0x80  -gravity North -chop 0x70  -gravity East -chop 28x0 pics/mkMat-ut-01.png  
magick pics/mkMat-ut-02.bmp       -gravity South -chop 0x55  -gravity North -chop 0x300 -gravity East -chop 28x0 pics/mkMat-ut-02.png   

magick pics/newtonC1-ut-01.bmp    -gravity South -chop 0x80  -gravity North -chop 0x70 -gravity East -chop 28x0 pics/newtonC1-ut-01.png
magick pics/newtonC1-ut-02.bmp    -gravity South -chop 0x55  -gravity North -chop 0x400  -gravity East -chop 28x0 pics/newtonC1-ut-02.png

magick pics/newtonRn-ut-01.bmp    -gravity South -chop 0x75  -gravity North -chop 0x70 -gravity East -chop 28x0 pics/newtonRn-ut-01.png
magick pics/newtonRn-ut-02.bmp    -gravity South -chop 0x55   -gravity North -chop 0x355 -gravity East -chop 28x0 pics/newtonRn-ut-02.png

magick pics/subsList-ut-01.bmp    -gravity South -chop 0x100  -gravity North -chop 0x70 -gravity East -chop 28x0 pics/subsList-ut-01.png
magick pics/subsList-ut-02.bmp    -gravity South -chop 0x55  -gravity North -chop 0x205 -gravity East -chop 28x0 pics/subsList-ut-02.png

# for f in pics/*.bmp; do
#   nf=$(echo pics/$(basename $f) | sed "s/.bmp/.png/")
#   if [ $f -nt $nf ]; then
#     echo convert $nf
#     magick $f $nf
#   else
#     echo skip $nf
#   fi
# done
#+end_src

#+RESULTS:
